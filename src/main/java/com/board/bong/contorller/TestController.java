package com.board.bong.contorller;

import com.board.bong.bean.User;
import com.board.bong.repository.UserRepository;

import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;
import org.springframework.security.core.Authentication;

import org.springframework.security.core.context.SecurityContextHolder;

import org.springframework.web.bind.annotation.*;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.GetMapping;


import java.util.*;

@RestController
public class TestController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        User n = new User();
//        n.setName("bong1");
//        n.setEmail("bong2");
//        userRepository.save(n);
//        return "Saved";

        return userRepository.findAll();
    }

    @GetMapping(path = "/isLoggedIn")
    public Map<String, String> isLoggedIn() {
//        HttpSession session = request.getSession();
//        Authentication authentication = (Authentication) session.getAttribute("USER_ID");
//        String user = authentication.getName();
//        return getAuthentication();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null)
            throw new AuthenticationCredentialsNotFoundException("no authentication error");

        if (!authentication.isAuthenticated())
            throw new AuthenticationCredentialsNotFoundException("not authenticated error");

        if (authentication instanceof AnonymousAuthenticationToken)
            throw new ArithmeticException("anonymous error");

        Map<String, String> map = new HashMap<>();

        map.put("id",authentication.getName());
        map.put("role",authentication.getAuthorities().toArray()[0].toString());
        return map;
    }
}

